<%- include('header', { title: 'Cadastrar Novo Prato' }) %>

<div class="container mt-4">
    <h2>Cadastrar Novo Prato</h2>
    
    <% if (success && success.length > 0) { %>
        <div class="alert alert-success"><%= success[0] %></div>
    <% } %>
    
    <% if (error && error.length > 0) { %>
        <div class="alert alert-danger"><%= error[0] %></div>
    <% } %>

    <form action="/dashboard/pratos/novo" method="POST" enctype="multipart/form-data">
        <div class="mb-3">
            <label class="form-label"><i class="fas fa-font"></i> Nome do Prato</label>
            <input type="text" class="form-control" name="nome" required>
        </div>

        <div class="mb-3">
            <label class="form-label"><i class="fas fa-file-alt"></i> Descrição</label>
            <textarea class="form-control" name="descricao" rows="3" required></textarea>
        </div>

        <div class="mb-3">
            <label class="form-label"><i class="fas fa-tag"></i> Categoria</label>
            <select class="form-control" name="categoria" required>
                <option value="">🔍 Selecione uma categoria</option>
                <option value="Brasileira">🇧🇷 Brasileira</option>
                <option value="Lanches">🍔 Lanches</option>
                <option value="Pizzas">🍕 Pizzas</option>
                <option value="Italiana">🍝 Italiana</option>
                <option value="Japonesa">🍱 Japonesa</option>
                <option value="Chinesa">🥢 Chinesa</option>
                <option value="Árabe">🥙 Árabe</option>
                <option value="Mexicana">🌮 Mexicana</option>
                <option value="Marmitas">🥡 Marmitas</option>
                <option value="Vegetariana">🥗 Vegetariana</option>
                <option value="Fit">💪 Fit</option>
                <option value="Açaí">🍇 Açaí</option>
                <option value="Padaria">🥖 Padaria</option>
                <option value="Pastel">🥟 Pastel</option>
                <option value="Sorvetes">🍨 Sorvetes</option>
                <option value="Espetinhos">🍖 Espetinhos</option>
                <option value="Bebidas">🥤 Bebidas</option>
                <option value="Porções">🍟 Porções</option>
                <option value="Combos">📦 Combos</option>
                <option value="Outros">✨ Outros</option>
            </select>
        </div>
        <div class="mb-3">
            <label class="form-label"><i class="fas fa-dollar-sign"></i> Preço </label>
            <div class="input-group">
                <span class="input-group-text">R$</span>
                <input type="text" 
                       class="form-control" 
                       id="preco_formatado" 
                       placeholder="0,00" 
                       inputmode="numeric"
                     
                       required>
                <input type="hidden" name="preco_base" id="preco_valor">
            </div>
            <small class="form-text text-muted">Digite o valor base em reais (ex: 10,90)</small>
        </div>

        <div class="mb-3">
            <label class="form-label"><i class="fas fa-clock"></i> Tempo de Preparo</label>
            <div class="input-group">
                <input type="number" 
                       class="form-control" 
                       name="tempo_preparo" 
                       id="tempo_preparo" 
                       placeholder="30" 
                       min="1"
                       required>
                <span class="input-group-text">minutos</span>
            </div>
            <small class="form-text text-muted">Digite o tempo estimado de preparo em minutos</small>
        </div>
        <div class="mb-3">
            <label class="form-label"><i class="fas fa-list-check"></i> Ingredientes</label>
            <div id="lista_ingredientes">
                <div class="input-group mb-2">
                    <input type="text" class="form-control" name="ingredientes[]" placeholder="Nome do ingrediente">
                    <div class="input-group-text">
                        <input type="checkbox" class="form-check-input mt-0" name="ingredientes_removiveis[]" value="1">
                        <span class="ms-2">Removível</span>
                    </div>
                    <button type="button" class="btn btn-outline-danger remover-ingrediente"><i class="fas fa-trash"></i> Remover</button>
                </div>
            </div>
            <button type="button" class="btn btn-outline-primary" id="adicionar_ingrediente"><i class="fas fa-plus-circle"></i> Adicionar Ingrediente</button>
        </div>


         
        <div class="mb-4">
            <label class="form-label"><i class="fas fa-plus-circle"></i> Complementos</label>
            <div id="lista_complementos">
                <div class="complemento-item input-group mb-2">
                    <input type="text" class="form-control" name="complementos[]" placeholder="Nome do complemento">
                    <span class="input-group-text">R$</span>
                    <input type="text" class="form-control preco-complemento" name="precos_complementos[]" placeholder="0,00">
                    <span class="input-group-text">Máx.</span>
                    <input type="number" class="form-control" name="max_escolhas[]" placeholder="1" min="1" style="max-width: 80px;">
                    <button type="button" class="btn btn-outline-danger remover-complemento">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
            <button type="button" class="btn btn-outline-primary btn-sm mt-2" id="adicionar_complemento">
                <i class="fas fa-plus"></i> Adicionar Complemento
            </button>
            <small class="form-text text-muted">
                Exemplo: Borda recheada (R$ 5,00), Bacon extra (R$ 3,00), etc.
            </small>
        </div>  
      

        <div class="mb-3">
            <label class="form-label"><i class="fas fa-image"></i> Imagem do Prato</label>
            <input type="file" class="form-control" name="imagem" accept="image/*">
        </div>

        <div class="mb-3 form-check">
            <input type="checkbox" class="form-check-input" name="disponivel" id="disponivel" checked>
            <label class="form-check-label" for="disponivel"><i class="fas fa-check-circle"></i> Disponível para venda</label>
        </div>

        <button type="submit" class="btn btn-primary"><i class="fas fa-save"></i> Cadastrar Prato</button>
    </form>
</div>

<%- include('footer') %>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const btnMostrarNovaCategoria = document.getElementById('btn_mostrar_nova_categoria');
        const btnCancelarCategoria = document.getElementById('btn_cancelar_categoria');
        const btnAdicionarCategoria = document.getElementById('btn_adicionar_categoria');
        const novaCategoriaContainer = document.getElementById('nova_categoria_container');
        const novaCategoriaInput = document.getElementById('nova_categoria_nome');
        const dropdownItems = document.querySelectorAll('.dropdown-item');
        const categoriaAtual = document.getElementById('categoriaAtual');
        const categoriaId = document.getElementById('categoria_id');

        // Manipular seleção de categoria
        dropdownItems.forEach(item => {
            if (item.id !== 'btn_mostrar_nova_categoria') {
                item.addEventListener('click', function(e) {
                    e.preventDefault();
                    categoriaId.value = this.dataset.id;
                    categoriaAtual.textContent = this.textContent;
                });
            }
        });
        
        // Mostrar o formulário de nova categoria
        btnMostrarNovaCategoria.addEventListener('click', function(e) {
            e.preventDefault();
            novaCategoriaContainer.style.display = 'block';
            novaCategoriaInput.focus();
        });
        
        // Esconder o formulário de nova categoria
        btnCancelarCategoria.addEventListener('click', function() {
            novaCategoriaContainer.style.display = 'none';
            novaCategoriaInput.value = '';
        });
        
        // Adicionar nova categoria via AJAX
        btnAdicionarCategoria.addEventListener('click', function() {
            const nomeCategoriaValue = novaCategoriaInput.value.trim();
            
            if (!nomeCategoriaValue) {
                alert('Por favor, insira um nome para a categoria.');
                return;
            }
            
            fetch('/dashboard/categorias/nova', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 
                    nome: nomeCategoriaValue
                }),
                credentials: 'same-origin'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Adicionar nova categoria à lista suspensa
                    const dropdownMenu = document.querySelector('.dropdown-menu');
                    const divider = dropdownMenu.querySelector('.dropdown-divider');
                    const novoItem = document.createElement('li');
                    novoItem.innerHTML = `<a class="dropdown-item" href="#" data-id="${data.categoria.id}">${data.categoria.nome}</a>`;
                    dropdownMenu.insertBefore(novoItem, divider);
                    
                    // Adicionar evento ao novo item
                    const novoLink = novoItem.querySelector('a');
                    novoLink.addEventListener('click', function(e) {
                        e.preventDefault();
                        categoriaId.value = data.categoria.id;
                        categoriaAtual.textContent = data.categoria.nome;
                    });
                    
                    // Selecionar a nova categoria
                    categoriaId.value = data.categoria.id;
                    categoriaAtual.textContent = data.categoria.nome;
                    
                    // Esconder o formulário
                    novaCategoriaContainer.style.display = 'none';
                    
                    // Limpar o campo
                    novaCategoriaInput.value = '';
                    
                    alert('Categoria criada com sucesso!');
                } else {
                    alert('Erro ao criar categoria: ' + (data.message || 'Erro desconhecido'));
                }
            })
            .catch(error => {
                console.error('Erro:', error);
                alert('Erro ao criar categoria. Verifique o console para mais detalhes.');
            });
        });
    });
</script>        
</script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Formatação de preços
        function formatarPreco(input) {
            let valor = input.value.replace(/[^\d]/g, '');
            
            // Converte para formato decimal (divide por 100)
            valor = (parseInt(valor) / 100).toFixed(2);
            
            // Substitui ponto por vírgula para formato brasileiro
            valor = valor.replace('.', ',');
            
            input.value = valor;
            return valor;
        }

        // Configuração do preço base
        const precoFormatado = document.getElementById('preco_formatado');
        const precoValor = document.getElementById('preco_valor');
        
        precoFormatado.addEventListener('input', function() {
            const valor = formatarPreco(this);
            precoValor.value = valor.replace(',', '.');
        });
        
        precoFormatado.addEventListener('blur', function() {
            if (this.value) {
                let valor = this.value;
                if (valor.indexOf(',') === -1) {
                    valor += ',00';
                } else {
                    const partes = valor.split(',');
                    if (partes[1].length === 0) valor += '00';
                    else if (partes[1].length === 1) valor += '0';
                }
                this.value = valor;
                precoValor.value = valor.replace(',', '.');
            }
        });

        // Gerenciamento de ingredientes
        const listaIngredientes = document.getElementById('lista_ingredientes');
        const btnAdicionarIngrediente = document.getElementById('adicionar_ingrediente');

        function criarLinhaIngrediente() {
            const div = document.createElement('div');
            div.className = 'input-group mb-2';
            div.innerHTML = `
                <input type="text" class="form-control" name="ingredientes[]" placeholder="Nome do ingrediente">
                <div class="input-group-text">
                    <input type="checkbox" class="form-check-input mt-0" name="ingredientes_removiveis[]" value="1">
                    <span class="ms-2">Removível</span>
                </div>
                <button type="button" class="btn btn-outline-danger remover-ingrediente">Remover</button>
            `;
            return div;
        }

        btnAdicionarIngrediente.addEventListener('click', function() {
            listaIngredientes.appendChild(criarLinhaIngrediente());
        });

        listaIngredientes.addEventListener('click', function(e) {
            if (e.target.classList.contains('remover-ingrediente')) {
                e.target.closest('.input-group').remove();
            }
        });

        // Validação do formulário
        const form = document.querySelector('form');
        form.addEventListener('submit', function(e) {
            let isValid = true;
            let errorMessages = [];

            // Validar nome
            const nome = document.querySelector('input[name="nome"]');
            if (!nome.value.trim()) {
                isValid = false;
                errorMessages.push('O nome do prato é obrigatório');
                nome.classList.add('is-invalid');
            } else {
                nome.classList.remove('is-invalid');
            }

            // Validar descrição
            const descricao = document.querySelector('textarea[name="descricao"]');
            if (!descricao.value.trim()) {
                isValid = false;
                errorMessages.push('A descrição do prato é obrigatória');
                descricao.classList.add('is-invalid');
            } else {
                descricao.classList.remove('is-invalid');
            }

            // Validar preço
            const preco = document.getElementById('preco_formatado');
            if (!preco.value || preco.value === '0,00') {
                isValid = false;
                errorMessages.push('O preço do prato é obrigatório');
                preco.classList.add('is-invalid');
            } else {
                preco.classList.remove('is-invalid');
            }

            // Validar ingredientes
            const ingredientes = document.querySelectorAll('input[name="ingredientes[]"]');
            let temIngrediente = false;
            ingredientes.forEach(ing => {
                if (ing.value.trim()) {
                    temIngrediente = true;
                }
            });
            if (!temIngrediente) {
                isValid = false;
                errorMessages.push('Adicione pelo menos um ingrediente');
                document.getElementById('ingredientes_container').classList.add('is-invalid');
            } else {
                document.getElementById('ingredientes_container').classList.remove('is-invalid');
            }

            if (!isValid) {
                e.preventDefault();
                const alertDiv = document.createElement('div');
                alertDiv.className = 'alert alert-danger mt-3';
                alertDiv.innerHTML = errorMessages.join('<br>');
                form.insertBefore(alertDiv, form.firstChild);

                // Remover alerta após 5 segundos
                setTimeout(() => {
                    alertDiv.remove();
                }, 5000);
            }
        });
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Complementos management
        const listaComplementos = document.getElementById('lista_complementos');
        const btnAdicionarComplemento = document.getElementById('adicionar_complemento');
    
        function formatarPrecoComplemento(input) {
            let valor = input.value.replace(/\D/g, '');
            valor = (parseInt(valor) || 0) / 100;
            input.value = valor.toLocaleString('pt-BR', {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            });
        }
    
        function criarComplementoItem() {
            const div = document.createElement('div');
            div.className = 'complemento-item input-group mb-2';
            div.innerHTML = `
                <input type="text" class="form-control" name="complementos[]" placeholder="Nome do complemento">
                <span class="input-group-text">R$</span>
                <input type="text" class="form-control preco-complemento" name="precos_complementos[]" placeholder="0,00">
                <span class="input-group-text">Máx.</span>
                <input type="number" class="form-control" name="max_escolhas[]" placeholder="1" min="1" style="max-width: 80px;">
                <button type="button" class="btn btn-outline-danger remover-complemento">
                    <i class="fas fa-trash"></i>
                </button>
            `;
    
            const precoInput = div.querySelector('.preco-complemento');
            precoInput.addEventListener('input', function() {
                formatarPrecoComplemento(this);
            });
    
            return div;
        }
    
        btnAdicionarComplemento.addEventListener('click', function() {
            listaComplementos.appendChild(criarComplementoItem());
        });
    
        listaComplementos.addEventListener('click', function(e) {
            if (e.target.closest('.remover-complemento')) {
                e.target.closest('.complemento-item').remove();
            }
        });
    
        // Format existing price inputs
        document.querySelectorAll('.preco-complemento').forEach(input => {
            input.addEventListener('input', function() {
                formatarPrecoComplemento(this);
            });
        });
    });
    </script>
    <style>
        .preco-complemento {
            max-width: 120px;
        }
        
        .complemento-item {
            transition: all 0.3s ease;
        }
        
        .complemento-item:hover {
            background-color: #f8f9fa;
        }
        
        .remover-complemento {
            transition: all 0.2s ease;
        }
        
        .remover-complemento:hover {
            transform: scale(1.1);
        }
     
.preco-complemento {
    max-width: 120px;
}

.input-group > .form-control.is-invalid {
    z-index: 0;
}
</style>
<style>
.is-invalid {
    border-color: #dc3545 !important;
    padding-right: calc(1.5em + 0.75rem) !important;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e") !important;
    background-repeat: no-repeat !important;
    background-position: right calc(0.375em + 0.1875rem) center !important;
    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem) !important;
}

#ingredientes_container.is-invalid {
    border: 1px solid #dc3545;
    border-radius: 0.25rem;
    padding: 0.5rem;
}
</style>
